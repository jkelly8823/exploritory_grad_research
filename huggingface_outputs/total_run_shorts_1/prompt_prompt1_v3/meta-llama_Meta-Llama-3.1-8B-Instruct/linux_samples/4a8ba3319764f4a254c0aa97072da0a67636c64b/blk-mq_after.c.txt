 

VULNERABLE: YES
VULNERABLE_LINES: 1
VULNERABILITY_DESCRIPTION: A race condition exists between the blk_mq_freeze_queue_start and blk_mq_unfreeze_queue functions. The freeze function acquires the queue lock, runs the queues, and then releases the lock. However, the unfreeze function also acquires the queue lock, but it does not release it before waking up the waiters. This can cause a deadlock if the unfreeze function is called while the freeze function is still holding the lock.
EXPLANATION: The freeze function acquires the queue lock to prevent new requests from being submitted while the queues are being run. However, the unfreeze function also acquires the queue lock to prevent new requests from being submitted while the queues are being run. If the unfreeze function is called while the freeze function is still holding the lock, the unfreeze function will block waiting for the lock to be released, causing a deadlock.
RECOMMENDATIONS: To fix this issue, the unfreeze function should release the queue lock before waking up the waiters. This can be done by moving the wake_up_all call to after the spin_unlock_irq call. Additionally, the freeze function should also release the queue lock before