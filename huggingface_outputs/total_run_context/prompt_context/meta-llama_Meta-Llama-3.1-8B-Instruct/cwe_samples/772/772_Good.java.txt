 

VULNERABLE: YES
VULNERABLE_LINES: 4
EXPLANATION:
The code is vulnerable to resource leak because the BufferReader object is not properly closed in case of an exception. The Close() method is called after the while loop, but if an exception occurs within the loop, the Close() method will not be called. This can lead to a resource leak.
RECOMMENDATIONS:
To fix this issue, the Close() method should be called in a finally block to ensure it is executed regardless of whether an exception occurs or not. The corrected code should look like this:
```csharp
private void processFile(string fName)
{
    BufferReader fil = new BufferReader(new FileReader(fName));
    try
    {
        String line;
        while ((line = fil.ReadLine())!= null)
        {
            processLine(line);
        }
    }
    finally
    {
        fil.Close();
    }
}
```VULNERABILITY LIST: 
CWE_ID: 20
CWE Description:
The product does not check for an error indication from a system call that can return an error.

Code Sample:

                public void processFile(string fName){BufferReader fil = new BufferReader(new FileReader(fName));String line;while