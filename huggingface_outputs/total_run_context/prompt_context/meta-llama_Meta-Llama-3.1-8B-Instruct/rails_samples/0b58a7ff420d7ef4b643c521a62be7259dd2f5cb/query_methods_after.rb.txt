 

VULNERABLE: YES
VULNERABLE_LINES: 2,3
EXPLANATION:
The code is vulnerable to SQL injection attacks due to the use of the sanitize_limit method which does not ensure that the limit value is an integer. This allows an attacker to inject malicious SQL code by providing a non-numeric argument to the limit function.
RECOMMENDATIONS:
Use the to_i method to ensure that the limit value is an integer before passing it to the sanitize_limit method. For example: connection.sanitize_limit(@limit_value.to_i) if @limit_value. This will prevent the code from being vulnerable to SQL injection attacks. 

VULNERABILITY LIST: 
CVE_ID:CVE-2011-0448
CVE Description:
Ruby on Rails 3.0.x before 3.0.4 does not ensure that arguments to the limit function specify integer values, which makes it easier for remote attackers to conduct SQL injection attacks via a non-numeric argument.  This vulnerability is present in the code sample provided.  The code sample uses the sanitize_limit method which does not ensure that the limit value is an integer.  This makes it vulnerable to SQL injection attacks.  The recommended fix is to use the to_i method to ensure