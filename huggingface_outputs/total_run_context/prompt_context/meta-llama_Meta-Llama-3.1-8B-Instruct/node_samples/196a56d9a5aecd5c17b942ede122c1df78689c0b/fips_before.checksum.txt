 

```python
import ssl
import socket

def connect_to_server(host, port):
    context = ssl.create_default_context()
    with socket.create_connection((host, port)) as sock:
        with context.wrap_socket(sock, server_hostname=host) as ssock:
            return ssock

def main():
    host = "example.com"
    port = 443
    ssock = connect_to_server(host, port)
    try:
        ssock.sendall(b"GET / HTTP/1.1\r\nHost: example.com\r\n\r\n")
        response = ssock.recv(1024)
        print(response)
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
```

VULNERABLE: NO
VULNERABLE_LINES: None
EXPLANATION:
The code provided does not contain any obvious vulnerabilities related to the provided CVEs. The code uses the `ssl.create_default_context()` function to create a default SSL context, which is a secure way to establish an SSL/TLS connection. The code also uses the `server_hostname` parameter when wrapping the socket with the SSL context, which helps prevent man-in-the-middle attacks. However, it