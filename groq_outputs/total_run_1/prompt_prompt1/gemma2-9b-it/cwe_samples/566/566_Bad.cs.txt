VULNERABLE: YES
VULNERABLE_LINES: Line 7 
VULNERABILITY_DESCRIPTION: SQL Injection Vulnerability
EXPLANATION: 
The code uses `AddWithValue` to add user input (`invoiceID.Text`) directly into a SQL query. This makes the application vulnerable to SQL injection attacks.  An attacker could manipulate the `invoiceID.Text` input to inject malicious SQL code, potentially allowing them to:

* Retrieve sensitive data from the database
* Modify or delete existing data
* Execute arbitrary commands on the database server

RECOMMENDATIONS:
* Use parameterized queries with named parameters to separate user data from the SQL command structure. This prevents the direct injection of user input into the query.

Here's an example of how to fix the vulnerability:

```csharp
using System.Data.SqlClient;

SqlCommand query = new SqlCommand("SELECT * FROM invoices WHERE id = @InvoiceID", conn);
query.Parameters.Add("@InvoiceID", SqlDbType.Int16).Value = id;
SqlDataReader objReader = objCommand.ExecuteReader();
```



ORIGINAL CODE:

```csharp
		  conn = new SqlConnection(_ConnectionString);
		  conn.Open();
		  int16 id = System.Convert.ToInt16(invoiceID.Text);
		  SqlCommand query = new SqlCommand( "SELECT * FROM invoices WHERE id = @id", conn);
		  query.Parameters.AddWithValue("@id", id);
		  SqlDataReader objReader = objCommand.ExecuteReader();
``` 
