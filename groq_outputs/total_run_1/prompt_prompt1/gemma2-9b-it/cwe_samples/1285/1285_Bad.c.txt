VULNERABLE: YES
VULNERABLE_LINES: Line 17
VULNERABILITY_DESCRIPTION: Buffer Overrun Vulnerability
EXPLANATION:
The code snippet you provided demonstrates a potential buffer overrun vulnerability. The line `while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)` reads data from a socket into a buffer of fixed size (`BUFFER_SIZE`). 

The vulnerability arises because the function `gen_recv` does not explicitly check if the received data exceeds the buffer's capacity. If a message from the socket is larger than `BUFFER_SIZE`, it will overwrite memory beyond the allocated space for `buf`. This can lead to unpredictable program behavior, crashes, or even remote code execution by malicious attackers.

RECOMMENDATIONS:
1. **Bound Checking:**  Implement bounds checking before copying data from `gen_recv` into `buf`. Verify that the received data size is less than or equal to `BUFFER_SIZE`.

2. **Dynamic Buffer Allocation:** Consider using dynamic memory allocation (e.g., `malloc`) to allocate a buffer large enough to accommodate the expected message size.

3. **Use Safer Alternatives:** Explore using underlying socket functions that have built-in buffer size handling, if available.


ORIGINAL CODE:


```c
                    /* capture the sizes of all messages */
                    int getsizes(int sock, int count, int *sizes) {
                        ...char buf[BUFFER_SIZE];int ok;int num, size;
                           
                           // read values from socket and added to sizes array
                           while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0){
                              
                                 
                                 // continue read from socket until buf only contains '.'
                                 if (DOTLINE(buf))break;
                                 else if (sscanf(buf, "%d %d", &num, &size) == 2)sizes[num - 1] = size;
                              
                           }...
                        
                     }
               
               
``` 

