VULNERABLE: YES
VULNERABLE_LINES: 11-13
VULNERABILITY_DESCRIPTION: Prototype Pollution Vulnerability

EXPLANATION: This code snippet demonstrates a potential prototype pollution vulnerability.  The vulnerability arises from the way the code handles the creation of nested object properties. Specifically, the `if (typeof objectToModify[attr] !== "object") { objectToModify[attr] = {}; }` line creates a new empty object if an attribute is not already an object. This creates an opportunity for an attacker to manipulate the prototype chain of an object, potentially allowing them to add malicious properties to the prototype which could then be inherited by other instances of that class, leading to unintended behavior or security breaches. 

RECOMMENDATIONS: 

1. **Validate Input:** Implement strict input validation for the `path` parameter. Ensure that it only contains valid attribute names and avoid allowing control over the construction of nested object paths. 
2. **Use Object.hasOwn()**: Instead of checking if an attribute exists using `typeof`, use `Object.hasOwn(objectToModify, attr)` to directly check for the presence of an attribute on the object itself, avoiding creation of unintended properties on the prototype chain.


ORIGINAL CODE:
```javascript
function setValueByPath(object, path, value) {

  const pathArray = path.split(".");
  const attributeToSet = pathArray.pop();
  let objectToModify = object;
  for (const attr of pathArray) {

    // Ignore attributes which resolve to object prototype
    if (attr === "__proto__" || attr === "constructor" || attr === "prototype") {

      continue;
    }

    if (typeof objectToModify[attr] !== "object") {

      objectToModify[attr] = {};
    }

    objectToModify = objectToModify[attr];
  }

  objectToModify[attributeToSet] = value;
  return object;
}
```
