VULNERABLE: YES
VULNERABLE_LINES: 2
VULNERABILITY_DESCRIPTION: SQL Injection
EXPLANATION: 
The provided code directly inserts user-supplied input (`street`) into a SQL query without proper sanitization. This opens the door to SQL injection attacks. An attacker could craft malicious input that modifies the intended query, potentially allowing them to retrieve sensitive data, modify existing data, or execute arbitrary SQL commands.

For example, an attacker could input `' OR '1'='1'` into the `street` variable.  This would change the query to:

```sql
from Address a where a.street=' OR '1'='1'
```

Because `'1'='1'` is always true, this would return all addresses in the database.

RECOMMENDATIONS:
- **Use parameterized queries:** Instead of directly concatenating user input into the SQL query, use parameterized queries (also known as prepared statements). This allows the database driver to treat the user input as data, rather than executable code, preventing malicious injection.


ORIGINAL CODE:
                  String street = getStreetFromUser();Query query = session.createQuery("from Address a where a.street='" + street + "'");




