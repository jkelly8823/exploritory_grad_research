VULNERABLE: YES
VULNERABLE_LINES: 9-11
VULNERABILITY_DESCRIPTION:  Authorization Bypass Vulnerability
EXPLANATION:
The code allows a `GUEST` and `USER` role to attempt a password reset, even though they are not authorized. The `default` case in the `switch` statement executes the `setPassword` function, bypassing the intended authorization checks. An attacker exploiting this flaw could potentially reset any user's password, regardless of their role. 

RECOMMENDATIONS:
1. **Restrict `resetPassword` to administrators only:** Modify the `if` condition to ensure only users with the `ADMIN` role can access the `resetPassword` function.

2. **Implement appropriate authorization checks:** Instead of relying solely on the `role` enum, consider a more robust authorization mechanism that explicitly verifies user permissions for password resets.

ORIGINAL CODE:
```java
public enum Roles {ADMIN,OPERATOR,USER,GUEST}
public void resetPassword(User requestingUser, User user, String password ){
   if(isAuthenticated(requestingUser)){
      switch(requestingUser.role){
         case GUEST:System.out.println("You are not authorized to perform this command");break;
         case USER:System.out.println("You are not authorized to perform this command");break;
         default:setPassword(user,password);break;}
   }
   else{System.out.println("You must be logged in to perform this command");}
}
``` 



