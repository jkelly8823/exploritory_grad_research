VULNERABLE: YES
VULNERABLE_LINES: 7
VULNERABILITY_DESCRIPTION: Recursive function loop with infinite recursion.
EXPLANATION:
The `do_something_recursive` function calls itself without modifying the value of the `flg` parameter. Since `flg` is always truthy (1), the `if` condition is always met, resulting in an infinite loop. This will eventually lead to a stack overflow error due to the excessive accumulation of function calls.

RECOMMENDATIONS:
1. **Modify `flg` within the function:** Introduce logic to decrement `flg` or change its value based on some condition. This will eventually make the `if` condition false, stopping the recursion.
2. **Base Case:** Add a base case to the recursion. This is a condition that, when met, will prevent the function from calling itself further.

Here's an example of a modified version with a base case:


```c++
void do_something_recursive(int flg) {
  ... // Do some real work here
  if (flg > 0) {
    do_something_recursive(flg - 1);
  }
}
```

ORIGINAL CODE:

```c++
    void do_something_recursive (int flg)
    {
    
      ... // Do some real work here, but the value of flg is unmodified
      if (flg) { do_something_recursive (flg); }    // flg is never modified so it is always TRUE - this call will continue until the stack explodes

    }
    int flag = 1; // Set to TRUE
    do_something_recursive (flag);
```
