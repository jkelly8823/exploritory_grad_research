VULNERABLE: YES
VULNERABLE_LINES: 4-6
VULNERABILITY_DESCRIPTION:
This code is vulnerable to an elevated privilege exploit due to a lack of input validation and poor exception handling.

EXPLANATION:
The function killProcess takes a processID as input but does not validate or sanitize this input. This could allow an attacker to pass malicious values, potentially leading to unintended behavior, including the termination of system-critical processes. Additionally, this function does not properly handle potential exceptions that may be raised by the os.kill function, such as PermissionError or ProcessLookupError. These exceptions could provide an attacker with valuable information about the system. Furthermore, this code lacks proper authorization checks as it only considers the process owner's identity, potentially allowing for exploits under certain circumstances.

RECOMMENDATIONS:
1. Add input validation and sanitation to ensure that the processID is a valid and legitimate process on the system.
2. Implement proper error handling to handle exceptions that may be raised by the os.kill function, such as PermissionError or ProcessLookupError.
3. Consider implementing more robust authorization checks, such as checking against a list of allowed processes or requiring additional authentication.

ORIGINAL CODE:
```
def killProcess(processID):
    user = getCurrentUser()
    #Check process owner against requesting user
    if getProcessOwner(processID) == user:
    os.kill(processID, signal.SIGKILL)
    return
    else:
    print("You cannot kill a process you don't own")
    return
```