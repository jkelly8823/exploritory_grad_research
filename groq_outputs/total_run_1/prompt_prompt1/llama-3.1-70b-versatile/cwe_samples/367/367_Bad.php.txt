VULNERABLE: YES
VULNERABLE_LINES: 4-5, 6
VULNERABILITY_DESCRIPTION:
The vulnerability is a Directory Traversal and a Path Traversal attack due to the use of user input to read and display a file's contents. The code is vulnerable to arbitrary file reading because it resolves the symbolic link and then checks the ownership. The use of user input to determine the file to read also raises concerns about the access control mechanisms.

EXPLANATION:
The vulnerability arises because the filename can be a symbolic link that resolves to a different location. This can lead to unintended access to arbitrary files, provided the symbolic link can be created. Furthermore, the fileowner check does not provide adequate access control, as the ownership of a file does not necessarily define its access permissions. An attacker could create a symbolic link to any file on the system, potentially leading to unauthorized access to sensitive information. The 'file_get_contents($realFile)' appears to be using an undefined variable, however assuming $filename should be used instead of $realFile this changes the attack.

RECOMMENDATIONS:
- Validate and sanitize the input 'filename'. The filename should be an absolute path and should be checked against a known set of allowed locations.
- Implement proper access controls using mechanisms such as authentication and role-based access controls.
- Ensure error handling and input validation for file operations.
- Consider using the 'realpath' function instead of 'readlink' for a more robust solution.
- Instead of just checking the fileowner use 'is_readable' in combination with permission checking.

ORIGINAL CODE:
```
function readFile($filename){
    $user = getCurrentUser();
        
    //resolve file if its a symbolic link
    if(is_link($filename)){$filename = readlink($filename);}
    if(fileowner($filename) == $user){echo file_get_contents($realFile);return;}else{echo 'Access denied';return false;}
}
```