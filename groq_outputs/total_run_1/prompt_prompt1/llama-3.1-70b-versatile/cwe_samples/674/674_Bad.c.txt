VULNERABLE: YES
VULNERABLE_LINES: 5-6
VULNERABILITY_DESCRIPTION:
Infinite Recursion Vulnerability

EXPLANATION:
This code has an infinite recursion vulnerability. The function `do_something_recursive` calls itself with the same value for `flg` in every iteration. Since the value of `flg` is never modified inside the function, it will always be `TRUE` and cause the function to call itself recursively until the stack overflows. This can lead to a Denial-of-Service (DoS) attack, where the system becomes unresponsive due to the exhaustion of available stack space.

RECOMMENDATIONS:
To fix this vulnerability, you should ensure that the recursive function has a base case that stops the recursion. In this case, you can modify the function to stop calling itself when `flg` is `FALSE`. Here is an example of the corrected code:

```c
void do_something_recursive (int *flg)
{
    // Do some real work here
    if (*flg) {
        // Update the value of flg to eventually stop the recursion
        *flg = *flg - 1;
        do_something_recursive (flg);
    }
}

int flag = 10; // Set to a finite value
do_something_recursive (&flag);
```

Alternatively, you can also use an iterative approach instead of recursive to avoid this vulnerability.

ORIGINAL CODE:

```c
void do_something_recursive (int flg)
{
    // Do some real work here, but the value of flg is unmodified
    if (flg) { do_something_recursive (flg); }    // flg is never modified so it is always TRUE - this call will continue until the stack explodes
}
int flag = 1; // Set to TRUE
do_something_recursive (flag);
```