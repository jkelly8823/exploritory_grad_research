VULNERABLE: YES
VULNERABLE_LINES: 5-6
VULNERABILITY_DESCRIPTION:
The code contains a potential infinite recursion vulnerability. This occurs when a function calls itself without a sufficient base case to stop the recursion.

EXPLANATION:
In the given code, the recursive function `do_something_recursive` is called with the value of `flg` without checking if it has reached the base case. Although there is a check `if (flg)` before the function is called recursively, there is no guarantee that `flg` will ever become 0. If `flg` never becomes 0, the function will keep calling itself indefinitely, leading to a stack overflow error.

RECOMMENDATIONS:
To fix this vulnerability, we can add an explicit base case in the recursive function. This could be done by adding a second parameter to the function that keeps track of the current recursion depth and stops the recursion when it reaches a maximum limit.

Here is an example of how to do this:
```c
int maxRecursionDepth = 1000;

void do_something_recursive(int flg, int depth) {
    if (depth >= maxRecursionDepth) {
        // Handle error: Maximum recursion depth reached
        return;
    }
    // Do some real work here
    if (flg) {
        do_something_recursive(flg, depth + 1);
    }
}
```
Alternatively, we could also avoid recursion by using a loop instead:
```c
void do_something() {
    int flg = 1;
    while (flg) {
        // Do some real work here
        if ( // Some condition ) {
            flg = 0;
        }
    }
}
```
ORIGINAL CODE:
```c
void do_something_recursive (int flg)
{
    // Do some real work here
    // Modify value of flg on done condition
    if (flg) { do_something_recursive (flg); }    // returns when flg changes to 0
}

int flag = 1; // Set to TRUE
do_something_recursive (flag);
```