VULNERABLE: YES
VULNERABLE_LINES: 1-2
VULNERABILITY_DESCRIPTION:
This code contains an Open Redirect vulnerability.

EXPLANATION:
The code directly takes user input from the 'url' GET parameter and redirects the user to that URL without proper validation. An attacker can manipulate this request and supply their own value for 'url', redirecting the user to a malicious site. This is known as an Open Redirect vulnerability. An attacker could exploit this vulnerability by crafting a phishing attack, allowing them to steal sensitive user information.

RECOMMENDATIONS:
To fix this vulnerability, you should validate the input from the 'url' parameter to ensure that it only redirects to trusted URLs. A simple fix is to use a whitelist of allowed URLs and only redirect to URLs in this list. Here's an example:

```php
$allowed_urls = array('http://example.com', 'http://example2.com');
$redirect_url = $_GET['url'];
if (in_array($redirect_url, $allowed_urls)) {
    header("Location: " . $redirect_url);
} else {
    echo "Error: invalid URL";
}
```

Alternatively, if the intention is to allow users to be redirected to their requested page after completing a process, consider using an internal redirect system with tokens, rather than passing the target URL as a query string parameter.

ORIGINAL CODE:
```php
$redirect_url = $_GET['url'];
header("Location: " . $redirect_url);
```