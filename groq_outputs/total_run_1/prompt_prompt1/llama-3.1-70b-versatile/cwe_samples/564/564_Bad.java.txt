VULNERABLE: YES
VULNERABLE_LINES: 1
VULNERABILITY_DESCRIPTION:
This code is vulnerable to SQL Injection attack.

EXPLANATION:
The vulnerability is caused by directly appending the user-provided `street` variable to the SQL query string without proper sanitization. This allows an attacker to inject malicious SQL code by providing a specially crafted input, such as a string containing SQL syntax characters (e.g., ' OR 1=1; --). This can lead to unauthorized data access, modification, or even deletion.

RECOMMENDATIONS:
To fix this vulnerability, you can use a parameterized query or concatenate named parameters. Here's an example:
```java
String street = getStreetFromUser();
Query query = session.createQuery("from Address a where a.street = :street");
query.setParameter("street", street);
```
By using a parameterized query, the input value is treated as a parameter rather than part of the SQL code, preventing SQL injection attacks.

ORIGINAL CODE:
```java
String street = getStreetFromUser();Query query = session.createQuery("from Address a where a.street='" + street + "'");
```