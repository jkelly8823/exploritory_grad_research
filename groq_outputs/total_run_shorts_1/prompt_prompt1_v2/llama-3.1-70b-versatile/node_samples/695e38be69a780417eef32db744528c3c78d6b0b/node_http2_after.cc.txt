VULNERABLE: YES
VULNERABLE_LINES: 9
VULNERABILITY_DESCRIPTION:
The code vulnerable to the improper handling of data length issue, specifically handling 0-length DATA frames without the END_STREAM flag, but not considering other flags.
EXPLANATION:
The function `Http2Session::HandleDataFrame` returns an error (1) when handling a 0-length DATA frame without the END_STREAM flag. However, it doesn't account for other flags that might be set. This does not appear to be as stringent of a policy as was laid out in CVE 2019-9518 (HPACK Bomb Attack), however they could still be experiencing crashes and DOS conditions when accepting and consuming entire DATA Frames without regard to headers values presented against the client.
RECOMMENDATIONS:
Verify that the DATA frame's flags comply with RFC 7540 (section 6.3) and handle various scenarios more explicitly. As an example, verify the flags `NGHTTP2_FLAG_END_STREAM`, `NGHTTP2_FLAG_END_HEADERS` and `NGHTTP2_FLAG_PRIORITY`. Also consider creating custom messages when rejecting invalid DATA frames to provide better error tracing and auditing.
ORIGINAL CODE:
```
frame->hd.type);
  switch (frame->hd.type) {
    case NGHTTP2_DATA:
      return session->HandleDataFrame(frame);
    case NGHTTP2_PUSH_PROMISE:
      // Intentional fall-through, handled just like headers frames
    case NGHTTP2_HEADERS:
      session->HandleHeadersFrame(frame);
// Called by OnFrameReceived when a complete DATA frame has been received.
// If we know that this was the last DATA frame (because the END_STREAM flag
// is set), then we'll terminate the readable side of the StreamBase.
int Http2Session::HandleDataFrame(const nghttp2_frame* frame) {
  int32_t id = GetFrameID(frame);
  Debug(this, "handling data frame for stream %d", id);
  Http2Stream* stream = FindStream(id);

  if (!stream->IsDestroyed() && frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {
    stream->EmitRead(UV_EOF);
  } else if (frame->hd.length == 0 &&
           !IsReverted(SECURITY_REVERT_CVE_2019_9518)) {
    return 1;  // Consider 0-length frame without END_STREAM an error.
  }
  return 0;
}

// Called by OnFrameReceived when a complete GOAWAY frame has been received.
```