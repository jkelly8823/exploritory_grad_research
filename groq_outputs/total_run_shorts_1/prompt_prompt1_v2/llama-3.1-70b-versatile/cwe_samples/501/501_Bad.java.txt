VULNERABLE: YES
VULNERABLE_LINES: 1
VULNERABILITY_DESCRIPTION:
This code is vulnerable to Stored Cross-Site Scripting (XSS) and potential Session Hijacking.

EXPLANATION:
The vulnerability arises from directly storing user input (`usrname`) into the session without proper validation or sanitization. This allows an attacker to inject malicious data, potentially leading to stored XSS attacks when the data is retrieved from the session. Additionally, if the `usrname` is not validated, an attacker could manipulate the session attribute and hijack another user's session.

RECOMMENDATIONS:
To fix this vulnerability, it is recommended to validate and sanitize the user input before storing it into the session. This can be achieved using a whitelist approach to ensure only expected characters are allowed. Additionally, consider implementing session management best practices, such as using a secure random value for session IDs and properly invalidating sessions when the user logs out.

```java
// Sanitize user input using a whitelist approach
String sanitizedUsrname = Sanitizer.sanitize(usrname, "[a-zA-Z0-9_]+");

// Validate the sanitized input
if (sanitizedUsrname != null && !sanitizedUsrname.isEmpty()) {
    session.setAttribute(ATTR_USR, sanitizedUsrname);
}
```

ORIGINAL CODE:
```java
usrname = request.getParameter("usrname");if (session.getAttribute(ATTR_USR) == null) {session.setAttribute(ATTR_USR, usrname);}
```