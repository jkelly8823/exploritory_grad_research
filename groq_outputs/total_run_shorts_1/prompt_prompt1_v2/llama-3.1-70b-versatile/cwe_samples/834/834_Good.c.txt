VULNERABLE: YES
VULNERABLE_LINES: 5
VULNERABILITY_DESCRIPTION:
This code is vulnerable to a stack overflow due to infinite recursion.

EXPLANATION:
The function `do_something_recursive` calls itself with the same argument `flg` if `flg` is non-zero. However, there is no decrement or any other way to decrease the value of `flg` within the function. As a result, if `flg` is not initially zero, the function will keep calling itself indefinitely until the program runs out of stack space, causing a stack overflow.

RECOMMENDATIONS:
To fix this vulnerability, you should add a mechanism to decrease or modify the value of `flg` within the function. Here's an example of how you could modify the code to decrement `flg` until it reaches zero:

```
void do_something_recursive (int flg)
{
    if (flg == 0) return;  // base case
    // Do some real work here
    do_something_recursive (flg - 1);  // recursive call with decreased flg
}
```

ORIGINAL CODE:
```
void do_something_recursive (int flg)
{
    // Do some real work here
    // Modify value of flg on done condition
    if (flg) { do_something_recursive (flg); }    // returns when flg changes to 0
}
int flag = 1; // Set to TRUE
do_something_recursive (flag);
```