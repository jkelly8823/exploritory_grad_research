VULNERABLE: YES
VULNERABLE_LINES: 1-3
VULNERABILITY_DESCRIPTION:
Double Free Vulnerability. 

EXPLANATION:
A double free vulnerability occurs when the same block of memory is freed more than once. In the given code snippet, the `free(ptr)` statement is called twice: once within the if condition and another time regardless of the condition. This is a vulnerability as it can potentially lead to unpredictable behavior or even crashes.

RECOMMENDATIONS:
To fix this vulnerability, you should ensure that the memory location is freed only once. You can do this by re-arranging the code such that the `free(ptr)` within the if condition is the only instance of it. 

```c
char* ptr = (char*)malloc (SIZE);
if (abrt) {
    free(ptr);
    ptr = NULL;
} else {
    // other code...
}

// Remove the free(ptr) here, or re-structure your code so it is only called within the if condition.
// If 'abrt' is always evaluated after the allocation and either of the 'if'/'else's would have been guaranteed to be reached,
// you can use 'finally' block of your language of choice (with the ability to set the variable before reaching it, and then to free after.)

// If you're using C/C++ without smart pointers and class methods like a 'finally', 
// ensure there's no duplicate free based on your conditional logic:
// a quick solution (for small bits of code like this one) can be to 
// remove duplicate free call:
// free(ptr);
```

ORIGINAL CODE:
```c
char* ptr = (char*)malloc (SIZE);
...if (abrt) {free(ptr);}...free(ptr);
```