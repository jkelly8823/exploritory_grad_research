VULNERABLE: YES
VULNERABLE_LINES: 1-2
VULNERABILITY_DESCRIPTION:
SQL Injection vulnerability due to deprecated `mysql_` functions and a potential injection vector in the query.

EXPLANATION:
The provided code snippet uses the deprecated `mysql_` functions, specifically `mysql_query()`. This function has been deprecated since PHP 5.5 and removed since PHP 7.0. However, the main concern here is the potential SQL injection vulnerability due to the lack of input validation and sanitization. Although the provided query does not seem to be directly vulnerable to injection since it does not dynamically insert user input, it is still using an insecure function, which poses a risk. Moreover, the `mysql_` functions do not support prepared statements, which are a key defense mechanism against SQL injection attacks.

RECOMMENDATIONS:
1. Migrate to a secure and supported PHP database extension, such as PDO (PHP Data Objects) or `mysqli`.
2. Use prepared statements to separate the SQL query from user input.
3. Validate and sanitize all user input that interacts with the database.

Here's an example using `mysqli` extension and prepared statements:

```php
$conn = new mysqli('localhost', 'username', 'password', 'database');
$query = 'Select * From users Where loggedIn=true';
$stmt = $conn->prepare($query);
$stmt->execute();
$results = $stmt->get_result();
// ...
```

 ORIGINAL CODE:

```php
$query = 'Select * From users Where loggedIn=true';
$results = mysql_query($query);
if (!$results) {exit;}
//Print list of users to page
echo '<div id="userlist">Currently Active Users:';
while ($row = mysql_fetch_assoc($results)) {
    echo '<div class="userNames">'.$row['fullname'].'</div>';
}
echo '</div>';
```