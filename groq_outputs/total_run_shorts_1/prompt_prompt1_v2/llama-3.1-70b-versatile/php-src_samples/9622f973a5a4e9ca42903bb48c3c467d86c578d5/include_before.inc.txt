VULNERABLE: YES
VULNERABLE_LINES: 3
VULNERABILITY_DESCRIPTION:
Unvalidated Input to Dangerous Function Calls
EXPLANATION:
The function `run_request` takes the variables `$host`, `$port`, `$uri`, and `$query` as input. However, it doesn't validate the input for potential malicious data. This input is then used to create an instance of the `Adoy\FastCGI\Client` class. 

An attacker could provide malicious input to `run_request`, which could be used to exploit vulnerabilities in the `Adoy\FastCGI\Client` class, or to inject malicious requests. The `$uri` variable is used to set `SCRIPT_FILENAME` and `SCRIPT_NAME` in the request parameters. 

This can potentially lead to a vulnerability known as a Server-Side Request Forgery (SSRF). An attacker could abuse this to trick the server into making unauthorized or malicious requests on its behalf.

RECOMMENDATIONS:
To fix this vulnerability, the input to the `run_request` function should be validated and sanitized to prevent malicious data from being injected. This can be done by checking if the input adheres to expected formats and discarding or rejecting input that doesn't. It would also be beneficial to limit the possible values for `uri` and `query` parameters.

One possible way to sanitize the `$uri` variable is to use `parse_url` to break it down into its components and validate each component. This can help to prevent malicious input from being used.

ORIGINAL CODE:
```
}
} /* }}} */

function run_request($host, $port, $uri='/ping', $query='') { /* {{{ */
	require_once 'fcgi.inc';
	$client = new Adoy\FastCGI\Client($host, $port);
	$params = array(
		'GATEWAY_INTERFACE' => 'FastCGI/1.0',
		'REQUEST_METHOD'    => 'GET',
		'SCRIPT_FILENAME'   => $uri,
		'SCRIPT_NAME'       => $uri,
		'SERVER_PROTOCOL'   => 'HTTP/1.1',
		'CONTENT_TYPE'      => '',
		'CONTENT_LENGTH'    => 0
	);
	return $client->request($params, false)."\n";
}
/* }}} */
```