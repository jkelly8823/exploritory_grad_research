VULNERABLE: YES
VULNERABLE_LINES: 6
VULNERABILITY_DESCRIPTION:
 PHP Code Injection through Dynamic Code Execution

EXPLANATION:
 The code snippet above is vulnerable to PHP Code Injection through Dynamic Code Execution. The variable `$test_code` contains a string that represents PHP code, which is then written to a file `bug61546_sub.php` using the `file_put_contents` function. This file can be executed as PHP code. If an attacker has the ability to manipulate the contents of `$test_code`, they can inject arbitrary PHP code.

 Although the `$test_code` string appears to contain harmless PHP code in this example, it can potentially be tampered with if the application receives untrusted input directly or indirectly from an attacker.

RECOMMENDATIONS:
 To prevent PHP Code Injection through Dynamic Code Execution, it is recommended to:
 1. Avoid dynamic code execution whenever possible.
 2. If dynamic code execution is necessary, make sure to validate and sanitize any input that affects the code to be executed.
 3. Consider using a templating engine instead of directly writing PHP code to files.

ORIGINAL CODE:
```php
$php = getenv("TEST_PHP_EXECUTABLE");
$test_code = <<<PHP
<?php
chdir('..');
var_dump(get_current_user() != "");
chdir('..');
var_dump(getmyinode() !== false);
var_dump(getlastmod() != false);
PHP;

file_put_contents("bug61546_sub.php", $test_code);
```