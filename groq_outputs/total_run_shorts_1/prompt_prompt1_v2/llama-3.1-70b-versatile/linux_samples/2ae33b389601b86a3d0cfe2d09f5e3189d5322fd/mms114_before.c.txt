VULNERABLE: YES
VULNERABLE_LINES: 14, 15
VULNERABILITY_DESCRIPTION:
Resource Leak
EXPLANATION:
In the `mms114_stop` function, there is a resource leak vulnerability. Specifically, the `disable_irq` function is called without a corresponding `enable_irq` to restore the original state. This can lead to an unexpected state where an interrupt is disabled unintentionally, potentially causing issues with other parts of the system.
However, there's also a potential resource leak on the regulator_disable calls. Without seeing the code of regulator_disable, we can't fully analyze for errors, given this context a disable should always be met with an enable.

RECOMMENDATIONS:
Call `enable_irq` to restore the original interrupt state when necessary.
Add regulator_enable calls in mms114_stop to properly track which regulators should be enabled.
Use proper error handling to account for regulator errors.

ORIGINAL CODE:
```c
	struct i2c_client *client = data->client;
	int error;

	if (data->core_reg)
		regulator_enable(data->core_reg);
	if (data->io_reg)
		regulator_enable(data->io_reg);
	mdelay(MMS114_POWERON_DELAY);

	error = mms114_setup_regs(data);
	if (error < 0)
		return error;

	if (data->pdata->cfg_pin)
		data->pdata->cfg_pin(true);

static void mms114_stop(struct mms114_data *data)
{
	struct i2c_client *client = data->client;

	disable_irq(client->irq);

	if (data->pdata->cfg_pin)
		data->pdata->cfg_pin(false);

	if (data->io_reg)
		regulator_disable(data->io_reg);
	if (data->core_reg)
		regulator_disable(data->core_reg);
}

static int mms114_input_open(struct input_dev *dev)
{```