VULNERABLE: YES
VULNERABLE_LINES: 1
VULNERABILITY_DESCRIPTION:
The code snippet is vulnerable to SQL injection attacks because it directly uses user input without proper sanitization.
 
EXPLANATION:
Although I don't see user input in this snippet, the use of the 'mysql_query' function, which is a deprecated function, indicates a potential for SQL injection. The variable '$query' is not parameterized and does not prevent malicious input. Furthermore, the function 'mysql_query' is a part of an outdated API that has been removed in PHP 7.

However, I didn't see any actual user input in the variable '$query'. Given that context, the vulnerability I found may stem from the fact that the MySQL API used here is deprecated in PHP 5.5 and later, and removed in PHP 7.

Given the potential for abuse with that function, I'll assume that there's a possibility of user input and provide the following recommendations.

RECOMMENDATIONS:
Using a modern, parameterized database query function is the recommended approach, such as 'mysqli' or 'PDO'. A secure, parameterized implementation might look like this:

```
$stmt = $mysqli->prepare('Select * From users Where loggedIn=?');
$stmt ->bind_param('i', 1); //  assuming loggedin is of an integer type.
$stmt ->execute();
```

This prevents malicious input from entering your SQL query, making your application more secure.

ORIGINAL CODE:
$query = 'Select * From users Where loggedIn=true';$results = mysql_query($query);
if (!$results) {exit;}
//Print list of users to page
echo '<div id="userlist">Currently Active Users:';while ($row = mysql_fetch_assoc($results)) {echo '<div class="userNames">'.$row['fullname'].'</div>';}echo '</div>';