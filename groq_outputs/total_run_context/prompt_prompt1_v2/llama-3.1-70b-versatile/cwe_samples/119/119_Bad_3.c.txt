VULNERABLE: YES
VULNERABLE_LINES: 9, 12
VULNERABILITY_DESCRIPTION: 
Out-of-bounds array access occurs when the `index` parameter is equal to the length of the array. Additionally, the `printf` statement attempts to access an array with an invalid index, which also triggers undefined behavior.

EXPLANATION: 
The code checks if the `index` parameter is less than the length of the array. However, in C, array indices start at 0 and end at `length - 1`. Therefore, accessing `array[index]` when `index` is equal to `len` will result in an out-of-bounds access. In this case, an attempt to access an invalid index also triggers a print statement with undefined behavior. This vulnerability can potentially lead to memory corruption or information disclosure.

RECOMMENDATIONS:
- The condition in the `if` statement should be changed to `index < len - 1` or `index >= 0 && index < len` to prevent out-of-bounds array access.
- The `printf` statement should be removed as it accesses an invalid index. Instead, a meaningful error message should be printed to indicate that the index is out of bounds.

ORIGINAL CODE:
```c
int getValueFromArray(int *array, int len, int index) {
    int value;
    if (index < len) {
        value = array[index];
    } else {
        printf("Value is: %d\n", array[index]);
        value = -1;
    }
    return value;
}
```