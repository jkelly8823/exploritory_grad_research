VULNERABLE: YES
VULNERABLE_LINES: 3
VULNERABILITY_DESCRIPTION:
Denial of Service (DoS) vulnerability through RegEx catastrophic backtracking
EXPLANATION:
The regular expression `/^(\w+\s?)*$/i` is vulnerable to catastrophic backtracking. This is due to the nested repetition conditions (`\w+` and `*`) and the quantifier `?` which creates a large number of possible paths for the regex engine to explore, leading to exponential backtracking. When a string that doesn't match the expected pattern is searched, this can result in significant CPU usage, potentially causing a denial of service.
RECOMMENDATIONS:
To prevent this vulnerability, the regular expression should be rewritten to prevent catastrophic backtracking. One way to do this is by using possessive quantifiers or atomic groups to limit the number of backtracking paths. Here is a rewritten version:

var bad_pattern  = /^(?>\w+)*$/i;

This modified pattern will possessively match any sequence of word characters, preventing backtracking from occurring. However, this may also change the behavior of the pattern slightly. To preserve the original behavior (matching an optional whitespace after the word characters), the following pattern could be used instead:

var bad_pattern  = /^(?>\w+\s?)*$/i;

Note: Another approach would be to anchor the regex using a proper negated character class or modify the regex to make it non-repetitive.

ORIGINAL CODE:
var test_string = "Bad characters: $@#";
var bad_pattern  = /^(\w+\s?)*$/i;
var result = test_string.search(bad_pattern);
