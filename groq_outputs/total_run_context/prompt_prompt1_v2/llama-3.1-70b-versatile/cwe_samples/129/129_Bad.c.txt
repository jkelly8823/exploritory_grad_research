VULNERABLE: YES
VULNERABLE_LINES: 7
VULNERABILITY_DESCRIPTION:
Out-of-bounds array access despite a bounds check is performed.

EXPLANATION:
The code performs a bounds check to ensure that the index is less than the length of the array. However, in the else branch, the code still tries to access the array at the specified index, even though the check failed, and printed out that index instead of returning an error immediately. This could potentially lead to the program accessing memory outside the bounds of the array.

RECOMMENDATIONS:
Instead of trying to access the array at the invalid index in the else branch, simply return an error value without attempting to access the array. This can prevent potential out-of-bounds array access issues.

Here is an updated version of the function with the vulnerability fixed:

    int getValueFromArray(int *array, int len, int index) {
        int value;
        if (index < len) {
            value = array[index];
            printf("Value is: %d\n", value);
        } else {
            printf("Error: Array index out of bounds.\n");
            value = -1;
        }
        return value;
    }

ORIGINAL CODE:
    int getValueFromArray(int *array, int len, int index) {
        int value;
        if (index < len) {
            value = array[index];
        } else {printf("Value is: %d\n", array[index]);value = -1;}
        return value;
    }